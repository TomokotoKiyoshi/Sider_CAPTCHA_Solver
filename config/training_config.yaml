# Lite-HRNet-18+LiteFPN 训练配置
# 目标: MAE < 2px, hit@2px > 98%

# 数据配置
data:
  processed_dir: "data/processed"                  # NPY批次数据目录
  # 数据结构:
  # - images/train/: train_XXXX.npy
  # - images/val/: val_XXXX.npy  
  # - labels/train/: 标签文件
  # - labels/val/: 标签文件
  
model:
  name: "Lite-HRNet-18+LiteFPN"
  input_channels: 4  # RGB(3) + padding_mask(1)
  model_path: "src.models.lite_hrnet_18_fpn"
  
optimizer:
  name: AdamW
  lr: 3.0e-4               # global_batch=512 (doubled from 256, so doubled lr)
  betas: [0.9, 0.999]
  eps: 1.0e-8
  weight_decay: 0.05
  clip_grad_norm: 1.0
  ema_decay: 0.999

sched:
  warmup_epochs: 1
  cosine_min_lr: 3.0e-6
  epochs: 160
  min_epochs: 100                 # 最少训练100个epoch
  patience: 18                     # 早停耐心值

train:
  batch_size: 128          # 增大批量大小以提高GPU利用率
  amp: true                # 混合精度：true/bf16(RTX40系列), fp16(旧GPU), false(不启用)
  channels_last: true      # 内存布局优化
  num_workers: 8           # Windows优化：减少到4个workers避免进程开销
  pin_memory: true
  non_blocking: true       # 异步数据传输（H2D）
  prefetch_factor: 4       # 增加预取因子以减少I/O等待
  persistent_workers: true # 保持workers进程存活，减少创建开销
  gradient_accumulation_steps: 2   # 梯度累积：有效批量=4096，更好利用GPU
  compile_model: false      # torch.compile优化（PyTorch 2.0+）- Windows上暂时禁用（需要Triton）
  compile_mode: "default"  # compile模式: default, reduce-overhead, max-autotune(最佳性能)
  
eval:
  metrics: [mae_px, rmse_px, hit_le_2px, hit_le_5px]
  select_by: hit_le_5px               # 以5px内命中率选择最佳模型
  vis_fail_k: 10                      # 可视化前10个失败案例
  eval_interval: 1                    # 每个epoch评估一次
  
  # 可视化配置
  visualization:
    num_heatmap_samples: 6           # 热力图可视化样本数
    num_best_samples: 3              # 显示最佳预测样本数
    num_worst_samples: 3             # 显示最差预测样本数
    save_predictions: true            # 是否保存预测图像
    save_heatmaps: true              # 是否保存热力图
  early_stopping:
    min_epochs: 100                   # 最少训练100个epoch后才考虑早停
    patience: 18                      # 连续18个epoch无改善则停止
    second_guard:                     # 第二道防护措施
      metric: mae_px                  # 监控MAE指标
      mode: min                       # 越小越好
      min_delta: 0.05                 # MAE（缺口和滑块误差的综合平均值）至少改善0.05px才算"有进步"
 

checkpoints:
  save_dir: "src/checkpoints/1.1.0"
  save_interval: 1                   # 每个epoch保存
  save_best: true                    # 保存最佳模型
  
  # 保存策略
  save_strategy:
    - name: "epoch_{epoch:03d}.pth"  # 每个epoch
    - name: "best_model.pth"         # 最佳模型
    
logging:
  log_dir: "logs/log-1.1.0"
  log_interval: 10                   # 每10个batch记录一次
  tensorboard: true
  tensorboard_dir: "logs/tensorboard/1.1.0"
  auto_launch_tensorboard: true      # 训练开始时自动启动TensorBoard
  tensorboard_port: 6006              # TensorBoard端口
  
  # 时间追踪配置
  time_tracking:
    enabled: true                     # 启用时间追踪
    log_to_tensorboard: true         # 记录到TensorBoard
    display_eta: true                 # 显示预计完成时间
    update_interval: 1                # 每个epoch更新一次
    time_format: "hours"              # 时间显示格式: seconds, minutes, hours
    show_progress_bar: true           # 显示进度条
  
  # TensorBoard监控项
  tb_items:
    - "loss/train"
    - "loss/val"
    - "metrics/mae_px"
    - "metrics/rmse_px"
    - "metrics/hit_le_2px"
    - "metrics/hit_le_5px"
    - "lr/current"
    - "vis/overlay_gap"           # 可视化缺口位置
    - "vis/overlay_slider"        # 可视化滑块位置
    - "hist/grad_layer_*"         # 梯度直方图
    - "hist/weight_layer_*"       # 权重直方图
    - "hist/angle_loss"           # 角度损失直方图
    - "hist/slider_loss"          # 滑块损失直方图
    - "hist/gap_loss"             # 缺口损失直方图
    - "time/epoch_duration"       # 每个epoch训练时间
    - "time/total_elapsed"        # 总训练时间
    - "time/eta_hours"            # 预计剩余时间（小时）
    - "time/avg_epoch_time"       # 平均每epoch时间
    - "time/estimated_total"      # 预计总训练时间

hardware:
  device: "cuda"                     # cuda/cpu
  cudnn_benchmark: true              # CuDNN自动调优
  cudnn_deterministic: false         # 非确定性算法（更快）
  allow_tf32: true                   # 启用TF32加速（RTX 30系列及以上）
  matmul_allow_tf32: true           # 矩阵乘法TF32加速
  cudnn_allow_tf32: true            # 卷积TF32加速

monitoring:
  wandb:
    enabled: false
    project: "slider-captcha"
    entity: "TomokotoKyoshi"
    tags: ["lite-hrnet", "v1.1.0"]

  # 性能监控
  profile:
    enabled: false
    wait: 0                         # 完全不采集数据，只是让模型和硬件进入稳定状态
    warmup: 0                       # 预热epoch
    active: 0                       # 每 10 步的数据会被保存下来，用来分析
    repeat: 1                       # 为了减少偶然波动，可以重复多轮测量再取平均。