# Model Configuration
# 模型配置文件 - 集中管理神经网络和预处理的所有参数

# ============== 预处理配置 ==============
preprocessing:
  # Letterbox变换配置
  letterbox:
    # 目标尺寸从captcha_config.yaml的size_confusion.target_size读取
    # padding填充值 (0-255)
    fill_value: 255
    # 插值方法: linear, cubic, nearest, area
    interpolation: 'linear'
    
  # 坐标系统配置
  coordinate:
    # 下采样率 (用于生成1/4分辨率特征图)
    downsample: 4
    # 原始输入尺寸将从实际图像动态获取
    # 栅格尺寸会自动计算: (target_height/downsample, target_width/downsample)
    
  # 热图生成配置
  heatmap:
    # 高斯标准差 (栅格单位)
    sigma: 1.5
    # 正样本阈值 (用于确定监督区域)
    threshold: 0.7
    # 高斯半径因子 (radius = sigma * radius_factor)
    radius_factor: 3
    
  # Padding mask配置
  padding_mask:
    # padding区域的值
    padding_value: 1
    # 有效区域的值
    valid_value: 0
    # 下采样方法: avg (软屏蔽) 或 max (硬屏蔽)
    pooling_method: 'avg'
    
  # 角度处理配置
  angle:
    # 是否启用角度处理
    enabled: true
    # 最大旋转角度 (度)
    max_rotation: 1.8
    # 角度监督的热图阈值
    supervision_threshold: 0.7
    
  # 归一化配置
  normalization:
    # 是否启用归一化
    enabled: true
    # RGB均值 (ImageNet标准)
    mean: [0.485, 0.456, 0.406]
    # RGB标准差 (ImageNet标准)
    std: [0.229, 0.224, 0.225]

# ============== 输入配置 ==============
input:
  # 网络输入通道配置
  channels:
    grayscale: 1    # 灰度图通道数
    padding: 1      # Padding掩码通道
    total: 2        # 总输入通道数 (Grayscale + padding_mask)
  
  # PyTorch张量格式 [channels, height, width]
  # 会根据captcha_config.yaml中的size_confusion.target_size自动计算
  tensor_shape: [2, 256, 512]  # [C, H, W]

# ============== 网络架构配置 ==============
backbone:
  type: "Lite-HRNet-18"
  
  # Lite-HRNet配置 - 优化版本（~28M参数，目标>95% @5px）
  lite_hrnet:
    # Stem (Stage1) - 增强特征提取阶段
    stem:
      in_channels: 2        # 输入通道数 (Grayscale + padding_mask)
      out_channels: 48      # 输出通道数 [优化: 32→48，提升50%]
      expansion: 3          # LiteBlock扩张倍率 [优化: 2→3，增强感受野]
      
    # Stage2配置 - 加深加宽
    stage2:
      # 通道配置 - 提升模型容量
      channels: [48, 96]  # [1/4分辨率, 1/8分辨率] [优化: 50%增宽]
      # 块数量配置 - 加深网络
      num_blocks: [4, 4]  # 每个分支的LiteBlock数量 [优化: 2x深度]
      # 扩张倍率 - 增强表达能力
      expansion: 3        # [优化: 2→3]
      
    # Stage3配置 - 强化多尺度学习
    stage3:
      # 通道配置 - 渐进式增宽
      channels: [48, 96, 192]  # [1/4分辨率, 1/8分辨率, 1/16分辨率]
      # 块数量配置 - 深度学习
      num_blocks: [6, 6, 6]  # 每个分支的LiteBlock数量 [优化: 2x深度]
      # 扩张倍率 - 增强特征
      expansion: 3
      
    # Stage4配置 - 高级语义特征
    stage4:
      # 通道配置 - 完整多尺度
      channels: [48, 96, 192, 384]  # [1/4, 1/8, 1/16, 1/32分辨率]
      # 块数量配置 - 深层抽象
      num_blocks: [4, 4, 4, 4]  # 每个分支的LiteBlock数量 [优化: 2x深度]
      # 扩张倍率 - 最大化表达
      expansion: 3
      
    # Stage5配置 (LiteFPN) - 增强特征融合
    stage5_lite_fpn:
      # 输入通道配置（来自Stage4的四个分支）
      in_channels: [48, 96, 192, 384]  # 匹配Stage4输出
      # FPN统一通道数
      fpn_channels: 256    # [优化: 128→256，2x容量提升]
      # 融合类型: 使用注意力机制实现自适应特征选择
      fusion_type: 'attention'  # [优化: weighted→attention]
      # 启用辅助监督以加速收敛
      return_pyramid: false     # LiteFPN不返回多尺度特征
      
    # Stage6配置 (双头预测网络) - 强化定位精度
    stage6_dual_head:
      # 输入通道数（来自Stage5 LiteFPN的Hf）
      in_channels: 256     # 匹配FPN输出
      # 中间层通道数
      mid_channels: 128    # [优化: 64→128，强化特征细化]
      # 是否使用角度预测头（用于处理微旋转）
      use_angle: true
      # 是否使用tanh限制偏移范围到[-0.5, 0.5]
      use_tanh_offset: true
      
  # 输出分辨率 (相对于输入)
  output_scales: [1/4, 1/8, 1/16, 1/32]
